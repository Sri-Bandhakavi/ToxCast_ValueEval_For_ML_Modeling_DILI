t.test(PosDepDelay_Chicagodf$DEP_DELAY, mu = 28.445354)
newark_df<- nona_airline[which(nona_airline$ORIGIN_AIRPORT_ID == 11618), ]
View(newark_df)
x <- newark_df$DISTANCE
y <- newark_df$DEP_DELAY
plot(y~x, xlab = "distance", ylab = "departure delay")
lin.reg <- lm(y~x)
abline(lin.reg, col = "blue")
summary(lin.reg)
plot(lin.reg)
par(mfrow = c(2,2))
par(mfrow = c(2,2))
plot(lin.reg)
lm.int$coefficients
line.reg$coefficients
lin.reg$coefficients
cor(y~x)
summary(lin.reg)
cor(y,x)
summary(lin.reg)
abline(lin.reg, col = "blue") # add regression line
lin.reg <- lm(y~x) # perform linear regression
plot(y~x, xlab = "distance", ylab = "departure delay") # lplot relationship between y and x
lin.reg <- lm(y~x) # perform linear regression
abline(lin.reg, col = "blue") # add regression line
lin.reg$coefficients
plot(lin.reg) # plot
par(mfrow = c(2,2))
plot(lin.reg) # plot
plot(lin.reg) # plot
install.packages("MASS")
library(MASS)
data(Pima.tr2)
library(MASS)
data(Pima.tr2)
install.packages("MASS")
library(MASS)
data(Pima.tr2)
install.packages("MASS")
View(Pima.tr2)
View(Pima.tr2)
?Pima.tr2
?Pima.tr2
??Pima.tr2
boxplot(Pima.tr2$npreg)
boxplot(Pima.tr2)
boxplot(Pima.tr2, horizontal = TRUE)
??Pima.tr2
boxplot(Pima.tr2, horizontal = TRUE) #box plot all variables in dataset. One outlier seen for npreg variable
boxplot(Pima.tr2$npreg)
boxplot(Pima.tr2$npreg, horizontal = TRUE)
table(colSums(is.na(Pima.tr2)))
colnames(Pima.tr2)
table(is.na(Pima.tr2$npreg)) # This column has no NA
table(is.na(Pima.tr2$glu))
table(is.na(Pima.tr2$bp))
table(is.na(Pima.tr2$skin)) # this column has
table(is.na(Pima.tr2$bmi)) # this column has
table(is.na(Pima.tr2$ped)) # this column has
barplot(table(colSums(is.na(Pima.tr2)))) #3 columns have missing values so each column tested further below
barplot(is.na(Pima.tr2))
model1 <- glm(type~bmi, data = Pima.tr2, family = binomial)
summary(model1)
model_npreg <- glm(type~npreg, data = Pima.tr2, family = binomial)
summary(model_npreg)
cname <- file.path("C:","Users", "Sri Bandhakavi","Desktop", "MPSA", "ALY6040DataMiningApplications","Wk1TextMining","texts")
cname
dir(cname)
##########Start Analysis#################################
#Load package "tm" and all the files you have downloaded
library(tm)
##########Start Analysis#################################
#Load package "tm" and all the files you have downloaded
library(tm)
#Create Corpus after you create the Source
docs <- VCorpus(DirSource(cname))
summary(docs)
#Load details of any documents in the corpus
#for example, load the first document in corpus
inspect(docs[1])
docs <- tm_map(docs,removePunctuation)
for (j in seq(docs)) {
docs[[j]] <- gsub("/", " ", docs[[j]])
docs[[j]] <- gsub("@", " ", docs[[j]])
docs[[j]] <- gsub("\\|", " ", docs[[j]])
docs[[j]] <- gsub("\u2028", " ", docs[[j]])
}
docs <- tm_map(docs, removeNumbers)
docs <- tm_map(docs, tolower)
docs <- tm_map(docs, PlainTextDocument)
DocsCopy <- docs
docs <- tm_map(docs, removeWords, stopwords("english"))
docs <- tm_map(docs, PlainTextDocument)
#Removing particular words
docs <- tm_map(docs, removeWords, c("syllogism", "tautology"))
#Combining words that should stay together.for example, combine "inner", "city" as "inner-city" so you can analyze them together
for (j in seq(docs))
{
docs[[j]] <- gsub("fake news", "fake_news", docs[[j]])
docs[[j]] <- gsub("inner city", "inner-city", docs[[j]])
docs[[j]] <- gsub("politically correct", "politically_correct", docs[[j]])
}
docs <- tm_map(docs, PlainTextDocument)
docs_st <- tm_map(docs, stemDocument)
docs_st <- tm_map(docs_st, PlainTextDocument)
writeLines(as.character(docs_st[1]))
docs_stc <- tm_map(docs_st, stemCompletion, dictionary = DocsCopy, lazy=TRUE)
docs_stc <- tm_map(docs_stc, PlainTextDocument)
writeLines(as.character(docs_stc[1]))
docs <- tm_map(docs, stripWhitespace)
docs <- tm_map(docs, PlainTextDocument)
#####Stage your data##########
#A document-term matrix or term-document matrix is a mathematical matrix that describes the frequency of terms that occur in a collection of documents. In a document-term matrix, rows correspond to documents in the collection and columns correspond to terms.
dtm <- DocumentTermMatrix(docs)
dtm
#Transpose the matrix
tdm <- TermDocumentMatrix(docs)
tdm
#Organize terms by Frequency
freq <- colSums(as.matrix(dtm))
length(freq)
ord <- order(freq)
m <- as.matrix(dtm)
dim(m)
#Explore as csv
write.csv(m, file="DocumentTermMatrix.csv")
#  Start by removing sparse terms:
dtms <- removeSparseTerms(dtm, 0.2) # This makes a matrix that is 20% empty space, maximum.
dtms
# most and least frequently occurring words.
freq <- colSums(as.matrix(dtm))
#Check out the frequency of frequencies
head(table(freq), 20) #The resulting output is two rows of numbers. The top number is the frequency with which words appear and the bottom number reflects how many words appear that frequently. Here, considering only the 20 lowest word frequencies, we can see that 1602 terms appear only once. There are also a lot of others that appear very infrequently.
tail(table(freq), 20) # The ", 20" indicates that we only want the last 20 frequencies
#For a less, fine-grained look at term freqency we can view a table of the terms we selected when we removed sparse terms
freq <- colSums(as.matrix(dtms))
freq
#sort the most frequent words as decreasing order
freq <- sort(colSums(as.matrix(dtm)), decreasing=TRUE)
head(freq, 14) #select top 14
#create a data frame for next steps
wf <- data.frame(word=names(freq), freq=freq)
head(wf)
#####Plot Word Frequency#########
library(ggplot2)#load package ggplot2
#Plot a histogram for words that appear at least 50 times
p <- ggplot(subset(wf, freq>50), aes(x = reorder(word, -freq), y = freq)) +geom_bar(stat = "identity") + theme(axis.text.x=element_text(angle=45, hjust=1))
p
#####Calculate terms correlations#####
#identify the words that most highly correlate with that term. If words always appear together, then correlation=1.0
findAssocs(dtm, c("country" , "american"), corlimit=0.85) # specifying a correlation limit of 0.85. Feel free to change the words you want to check and correlation limit
#####Create word clouds######
# First load the package that makes word clouds in R.
library(wordcloud)
dtms <- removeSparseTerms(dtm, 0.15) # Prepare the data (max 15% empty space)
freq <- colSums(as.matrix(dtm)) # Find word frequencies
dark2 <- brewer.pal(6, "Dark2")
wordcloud(names(freq), freq, max.words=100, rot.per=0.2, colors=dark2)
#####Hierarchal Clustering#####
dtms <- removeSparseTerms(dtm, 0.15) # This makes a matrix that is only 15% empty space.
library(cluster)
d <- dist(t(dtms), method="euclidian")   # First calculate distance between words
fit <- hclust(d=d, method="complete")    # Also try: method="ward.D"
plot.new()
plot(fit, hang=-1)
groups <- cutree(fit, k=6)   # "k=" defines the number of clusters you are using
rect.hclust(fit, k=6, border="red") # draw dendogram with red borders around the 5 clusters
#####K-means clustering#####
library(fpc)
library(cluster)
dtms <- removeSparseTerms(dtm, 0.15) # Prepare the data (max 15% empty space)
d <- dist(t(dtms), method="euclidian")
kfit <- kmeans(d, 2)
clusplot(as.matrix(d), kfit$cluster, color=T, shade=T, labels=2, lines=0)
setwd("C:\\Users\\Sri Bandhakavi\\Desktop\\Python\\EBTC_ph4\Modeling\PCA_eightyfive_percent_data")
setwd("C:\\Users\\Sri Bandhakavi\\Desktop\\Python\\EBTC_ph4\Modeling\PCA_eightyfive_percent_data")
setwd("C:\\Users\\Sri Bandhakavi\\Desktop\\Python\\EBTC_ph4\\Modeling\\PCA_eightyfive_percent_data")
library(tidyverse)
library(ggpubr)
three_models<-read.csv("three_models_metrics.csv")
View(three_models)
colnames(three_models)
colnames(three_models)[1]<-"ModelClass"
benchmark_vs_best_model<-three_models[1:20, ]
View(benchmark_vs_best_model)
a<-ggplot(data=benchmark_vs_best_model, aes(x=Model, y=Precision, fill=Predictors))+geom_boxplot()+
theme_classic(base_size = 20)+xlab("")+ylab("P(MostDILI|Target_Perturbn*\n")+
stat_summary(fun.y = mean, color = "red",geom = "point", size = 2)+
stat_compare_means(method="t.test", label.y=1.0, color="blue", size=6) +theme(legend.position = "none")
a
ggplot(data=benchmark_vs_best_model, aes(x=Model, y=Precision, fill=Predictors))+geom_boxplot(alpha=0.1)+
geom_point(aes(color=Precision), position = 'jitter', alpha=0.4)+
theme_classic(base_size = 20)+xlab("")+ylab("Precision")+
stat_summary(fun.y = mean, color = "red",geom = "point", size = 2)+
stat_compare_means(method="t.test", label.y=1.0, color="blue", size=6) +theme(legend.position = "none")
ggplot(data=benchmark_vs_best_model, aes(x=Model, y=Recall, fill=Predictors))+geom_boxplot(alpha=0.1)+
geom_point(aes(color=Recall), position = 'jitter', alpha=0.4)+
theme_classic(base_size = 20)+xlab("")+ylab("Precision")+
stat_summary(fun.y = mean, color = "red",geom = "point", size = 2)+
stat_compare_means(method="t.test", label.y=1.0, color="blue", size=6) +theme(legend.position = "none")
ggplot(data=benchmark_vs_best_model, aes(x=Model, y=Recall, fill=Predictors))+geom_boxplot(alpha=0.1)+
geom_point(aes(color=Recall), position = 'jitter', alpha=0.4)+
theme_classic(base_size = 20)+xlab("")+ylab("Recall (Sensitivity)")+
stat_summary(fun.y = mean, color = "red",geom = "point", size = 2)+
stat_compare_means(method="t.test", label.y=1.0, color="blue", size=6) +theme(legend.position = "none")
ggplot(data=benchmark_vs_best_model, aes(x=Model, y=Specificity, fill=Predictors))+geom_boxplot(alpha=0.1)+
geom_point(aes(color=Specificity), position = 'jitter', alpha=0.4)+
theme_classic(base_size = 20)+xlab("")+ylab("Specificity/TNR")+
stat_summary(fun.y = mean, color = "red",geom = "point", size = 2)+
stat_compare_means(method="t.test", label.y=1.0, color="blue", size=6) +theme(legend.position = "none")
ggplot(data=benchmark_vs_best_model, aes(x=Model, y=Accuracy, fill=Predictors))+geom_boxplot(alpha=0.1)+
geom_point(aes(color=Accuracy), position = 'jitter', alpha=0.4)+
theme_classic(base_size = 20)+xlab("")+ylab("Accuracy")+
stat_summary(fun.y = mean, color = "red",geom = "point", size = 2)+
stat_compare_means(method="t.test", label.y=1.0, color="blue", size=6) +theme(legend.position = "none")
ggarrange(a,b,c,d, ncol = 2, nrow = 2, common.legend = TRUE, legend = "bottom")
a<-ggplot(data=benchmark_vs_best_model, aes(x=Model, y=Precision, fill=Predictors))+geom_boxplot(alpha=0.1)+
geom_point(aes(color=Precision), position = 'jitter', alpha=0.4)+
theme_classic(base_size = 20)+xlab("")+ylab("Precision")+
stat_summary(fun.y = mean, color = "red",geom = "point", size = 2)+
stat_compare_means(method="t.test", label.y=1.0, color="blue", size=6) +theme(legend.position = "none")
b<-ggplot(data=benchmark_vs_best_model, aes(x=Model, y=Recall, fill=Predictors))+geom_boxplot(alpha=0.1)+
geom_point(aes(color=Recall), position = 'jitter', alpha=0.4)+
theme_classic(base_size = 20)+xlab("")+ylab("Recall (Sensitivity)")+
stat_summary(fun.y = mean, color = "red",geom = "point", size = 2)+
stat_compare_means(method="t.test", label.y=1.0, color="blue", size=6) +theme(legend.position = "none")
c<-ggplot(data=benchmark_vs_best_model, aes(x=Model, y=Specificity, fill=Predictors))+geom_boxplot(alpha=0.1)+
geom_point(aes(color=Specificity), position = 'jitter', alpha=0.4)+
theme_classic(base_size = 20)+xlab("")+ylab("Specificity")+
stat_summary(fun.y = mean, color = "red",geom = "point", size = 2)+
stat_compare_means(method="t.test", label.y=1.0, color="blue", size=6) +theme(legend.position = "none")
d<-ggplot(data=benchmark_vs_best_model, aes(x=Model, y=Accuracy, fill=Predictors))+geom_boxplot(alpha=0.1)+
geom_point(aes(color=Accuracy), position = 'jitter', alpha=0.4)+
theme_classic(base_size = 20)+xlab("")+ylab("Accuracy")+
stat_summary(fun.y = mean, color = "red",geom = "point", size = 2)+
stat_compare_means(method="t.test", label.y=1.0, color="blue", size=6) +theme(legend.position = "none")
ggarrange(a,b,c,d, ncol = 2, nrow = 2, common.legend = TRUE, legend = "bottom")
ggarrange(a,b,c,d, ncol = 2, nrow = 2, legend = "bottom")
a<-ggplot(data=benchmark_vs_best_model, aes(x=Model, y=Precision, fill=Predictors))+geom_boxplot(alpha=0.1)+
geom_point(aes(color=Precision), position = 'jitter', alpha=0.4)+
theme_classic(base_size = 20)+xlab("")+ylab("Precision")+
stat_summary(fun.y = mean, color = "red",geom = "point", size = 2)+
stat_compare_means(method="t.test", label.y=1.0, color="blue", size=6) +theme(legend.position = "none")+coord_flip()
b<-ggplot(data=benchmark_vs_best_model, aes(x=Model, y=Recall, fill=Predictors))+geom_boxplot(alpha=0.1)+
geom_point(aes(color=Recall), position = 'jitter', alpha=0.4)+
theme_classic(base_size = 20)+xlab("")+ylab("Recall (Sensitivity)")+
stat_summary(fun.y = mean, color = "red",geom = "point", size = 2)+
stat_compare_means(method="t.test", label.y=1.0, color="blue", size=6) +theme(legend.position = "none")+coord_flip()
c<-ggplot(data=benchmark_vs_best_model, aes(x=Model, y=Specificity, fill=Predictors))+geom_boxplot(alpha=0.1)+
geom_point(aes(color=Specificity), position = 'jitter', alpha=0.4)+
theme_classic(base_size = 20)+xlab("")+ylab("Specificity")+
stat_summary(fun.y = mean, color = "red",geom = "point", size = 2)+
stat_compare_means(method="t.test", label.y=1.0, color="blue", size=6) +theme(legend.position = "none")+coord_flip()
d<-ggplot(data=benchmark_vs_best_model, aes(x=Model, y=Accuracy, fill=Predictors))+geom_boxplot(alpha=0.1)+
geom_point(aes(color=Accuracy), position = 'jitter', alpha=0.4)+
theme_classic(base_size = 20)+xlab("")+ylab("Accuracy")+
stat_summary(fun.y = mean, color = "red",geom = "point", size = 2)+
stat_compare_means(method="t.test", label.y=1.0, color="blue", size=6) +theme(legend.position = "none")+coord_flip()
ggarrange(a,b,c,d, ncol = 2, nrow = 2, legend = "bottom")
a<-ggplot(data=benchmark_vs_best_model, aes(x=Model, y=Precision, fill=Predictors))+geom_boxplot(alpha=0.1)+
geom_point(aes(color=Precision), position = 'jitter', alpha=0.4)+
theme_classic(base_size = 20)+xlab("")+ylab("Precision")+
stat_summary(fun.y = mean, color = "red",geom = "point", size = 2)+
stat_compare_means(method="t.test", label.y=1.0, color="blue", size=6) +theme(legend.position = "none")
b<-ggplot(data=benchmark_vs_best_model, aes(x=Model, y=Recall, fill=Predictors))+geom_boxplot(alpha=0.1)+
geom_point(aes(color=Recall), position = 'jitter', alpha=0.4)+
theme_classic(base_size = 20)+xlab("")+ylab("Recall (Sensitivity)")+
stat_summary(fun.y = mean, color = "red",geom = "point", size = 2)+
stat_compare_means(method="t.test", label.y=1.0, color="blue", size=6) +theme(legend.position = "none")
c<-ggplot(data=benchmark_vs_best_model, aes(x=Model, y=Specificity, fill=Predictors))+geom_boxplot(alpha=0.1)+
geom_point(aes(color=Specificity), position = 'jitter', alpha=0.4)+
theme_classic(base_size = 20)+xlab("")+ylab("Specificity")+
stat_summary(fun.y = mean, color = "red",geom = "point", size = 2)+
stat_compare_means(method="t.test", label.y=1.0, color="blue", size=6) +theme(legend.position = "none")
d<-ggplot(data=benchmark_vs_best_model, aes(x=Model, y=Accuracy, fill=Predictors))+geom_boxplot(alpha=0.1)+
geom_point(aes(color=Accuracy), position = 'jitter', alpha=0.4)+
theme_classic(base_size = 20)+xlab("")+ylab("Accuracy")+
stat_summary(fun.y = mean, color = "red",geom = "point", size = 2)+
stat_compare_means(method="t.test", label.y=1.0, color="blue", size=6) +theme(legend.position = "none")
ggarrange(a,b,c,d, ncol = 2, nrow = 2, common.legend=TRUE, legend = "bottom")
ggplot(data=benchmark_vs_best_model, aes(x=Model, y=Precision, fill=Predictors))+geom_boxplot(alpha=0.1)+
geom_point(aes(color=Precision), position = 'jitter', alpha=0.4)+
theme_classic(base_size = 20)+xlab("")+ylab("Precision")+
stat_summary(fun.y = mean, color = "red",geom = "point", size = 2)+
stat_summary(fun.y=mean, color="black", geom="text")+
stat_compare_means(method="t.test", label.y=1.0, color="blue", size=6) +theme(legend.position = "none")
ggplot(data=benchmark_vs_best_model, aes(x=Model, y=Precision, fill=Predictors))+geom_boxplot(alpha=0.1)+
geom_point(aes(color=Precision), position = 'jitter', alpha=0.4)+
theme_classic(base_size = 20)+xlab("")+ylab("Precision")+
stat_summary(fun.y = mean, color = "red",geom = "point", size = 2)+
stat_summary(fun.y=mean, color="black", geom="text", label=fun.y)
ggplot(data=benchmark_vs_best_model, aes(x=Model, y=Precision, fill=Predictors))+geom_boxplot(alpha=0.1)+
geom_point(aes(color=Precision), position = 'jitter', alpha=0.4)+
theme_classic(base_size = 20)+xlab("")+ylab("Precision")+
stat_summary(fun.y = mean, color = "red",geom = "point", size = 2)+
stat_compare_means(method="t.test", label.y=1.0, color="blue", size=6, paired = TRUE) +theme(legend.position = "none")
a<-ggplot(data=benchmark_vs_best_model, aes(x=Model, y=Precision, fill=Predictors))+geom_boxplot(alpha=0.1)+
geom_point(aes(color=Precision), position = 'jitter', alpha=0.4)+
theme_classic(base_size = 20)+xlab("")+ylab("Precision")+
stat_summary(fun.y = mean, color = "red",geom = "point", size = 2)+
stat_compare_means(method="t.test", label.y=1.0, color="blue", size=6, paired = TRUE) +theme(legend.position = "none")
b<-ggplot(data=benchmark_vs_best_model, aes(x=Model, y=Recall, fill=Predictors))+geom_boxplot(alpha=0.1)+
geom_point(aes(color=Recall), position = 'jitter', alpha=0.4)+
theme_classic(base_size = 20)+xlab("")+ylab("Recall (Sensitivity)")+
stat_summary(fun.y = mean, color = "red",geom = "point", size = 2)+
stat_compare_means(method="t.test", label.y=1.0, color="blue", size=6, paired=TRUE) +theme(legend.position = "none")
c<-ggplot(data=benchmark_vs_best_model, aes(x=Model, y=Specificity, fill=Predictors))+geom_boxplot(alpha=0.1)+
geom_point(aes(color=Specificity), position = 'jitter', alpha=0.4)+
theme_classic(base_size = 20)+xlab("")+ylab("Specificity")+
stat_summary(fun.y = mean, color = "red",geom = "point", size = 2)+
stat_compare_means(method="t.test", label.y=1.0, color="blue", size=6, paired=TRUE) +theme(legend.position = "none")
d<-ggplot(data=benchmark_vs_best_model, aes(x=Model, y=Accuracy, fill=Predictors))+geom_boxplot(alpha=0.1)+
geom_point(aes(color=Accuracy), position = 'jitter', alpha=0.4)+
theme_classic(base_size = 20)+xlab("")+ylab("Accuracy")+
stat_summary(fun.y = mean, color = "red",geom = "point", size = 2)+
stat_compare_means(method="t.test", label.y=1.0, color="blue", size=6, paired=TRUE) +theme(legend.position = "none")
ggarrange(a,b,c,d, ncol = 2, nrow = 2, common.legend=TRUE, legend = "bottom")
a<-ggplot(data=benchmark_vs_best_model, aes(x=Model, y=Precision, fill=Predictors))+geom_boxplot(alpha=0.1)+
geom_point(aes(color=Precision), position = 'jitter', alpha=0.4)+
theme_classic(base_size = 20)+xlab("")+ylab("Precision")+
stat_summary(fun.y = mean, color = "red",geom = "point", size = 2)+
stat_compare_means(method="t.test", label.y=1.0, color="blue", size=6, paired = TRUE) +theme(legend.position = "none")
b<-ggplot(data=benchmark_vs_best_model, aes(x=Model, y=Recall, fill=Predictors))+geom_boxplot(alpha=0.1)+
geom_point(aes(color=Recall), position = 'jitter', alpha=0.4)+
theme_classic(base_size = 20)+xlab("")+ylab("Sensitivity")+
stat_summary(fun.y = mean, color = "red",geom = "point", size = 2)+
stat_compare_means(method="t.test", label.y=1.0, color="blue", size=6, paired=TRUE) +theme(legend.position = "none")
c<-ggplot(data=benchmark_vs_best_model, aes(x=Model, y=Specificity, fill=Predictors))+geom_boxplot(alpha=0.1)+
geom_point(aes(color=Specificity), position = 'jitter', alpha=0.4)+
theme_classic(base_size = 20)+xlab("")+ylab("Specificity")+
stat_summary(fun.y = mean, color = "red",geom = "point", size = 2)+
stat_compare_means(method="t.test", label.y=1.0, color="blue", size=6, paired=TRUE) +theme(legend.position = "none")
d<-ggplot(data=benchmark_vs_best_model, aes(x=Model, y=Accuracy, fill=Predictors))+geom_boxplot(alpha=0.1)+
geom_point(aes(color=Accuracy), position = 'jitter', alpha=0.4)+
theme_classic(base_size = 20)+xlab("")+ylab("Accuracy")+
stat_summary(fun.y = mean, color = "red",geom = "point", size = 2)+
stat_compare_means(method="t.test", label.y=1.0, color="blue", size=6, paired=TRUE) +theme(legend.position = "none")
ggarrange(a,b,c,d, ncol = 2, nrow = 2, common.legend=TRUE, legend = "bottom")
a<-ggplot(data=benchmark_vs_best_model, aes(x=Model, y=Precision, fill=Predictors))+geom_boxplot(alpha=0.1)+
geom_point(aes(color=Precision), position = 'jitter', alpha=0.4)+
theme_classic(base_size = 20)+xlab("")+ylab("Precision\n")+
stat_summary(fun.y = mean, color = "red",geom = "point", size = 2)+
stat_compare_means(method="t.test", label.y=1.0, color="blue", size=6, paired = TRUE) +theme(legend.position = "none")
b<-ggplot(data=benchmark_vs_best_model, aes(x=Model, y=Recall, fill=Predictors))+geom_boxplot(alpha=0.1)+
geom_point(aes(color=Recall), position = 'jitter', alpha=0.4)+
theme_classic(base_size = 20)+xlab("")+ylab("Sensitivity\n")+
stat_summary(fun.y = mean, color = "red",geom = "point", size = 2)+
stat_compare_means(method="t.test", label.y=1.0, color="blue", size=6, paired=TRUE) +theme(legend.position = "none")
c<-ggplot(data=benchmark_vs_best_model, aes(x=Model, y=Specificity, fill=Predictors))+geom_boxplot(alpha=0.1)+
geom_point(aes(color=Specificity), position = 'jitter', alpha=0.4)+
theme_classic(base_size = 20)+xlab("")+ylab("Specificity\n")+
stat_summary(fun.y = mean, color = "red",geom = "point", size = 2)+
stat_compare_means(method="t.test", label.y=1.0, color="blue", size=6, paired=TRUE) +theme(legend.position = "none")
d<-ggplot(data=benchmark_vs_best_model, aes(x=Model, y=Accuracy, fill=Predictors))+geom_boxplot(alpha=0.1)+
geom_point(aes(color=Accuracy), position = 'jitter', alpha=0.4)+
theme_classic(base_size = 20)+xlab("")+ylab("Accuracy\n")+
stat_summary(fun.y = mean, color = "red",geom = "point", size = 2)+
stat_compare_means(method="t.test", label.y=1.0, color="blue", size=6, paired=TRUE) +theme(legend.position = "none")
ggarrange(a,b,c,d, ncol = 2, nrow = 2, common.legend=TRUE, legend = "bottom")
ggarrange(a,b,c,d, ncol = 2, nrow = 2, common.legend=TRUE, legend = "right")
ggarrange(a,b,c,d, ncol = 2, nrow = 2, common.legend=TRUE, legend = "topleft")
ggarrange(a,b,c,d, ncol = 2, nrow = 2, common.legend=TRUE, legend = "left")
ggarrange(a,b,c,d, ncol = 2, nrow = 2, common.legend=TRUE, legend = "top")
benchmark_vs_next_best_model<-three_models[-c(11:20), ]
View(benchmark_vs_next_best_model)
e<-ggplot(data=benchmark_vs_next_best_model, aes(x=Model, y=Precision, fill=Predictors))+geom_boxplot(alpha=0.1)+
geom_point(aes(color=Precision), position = 'jitter', alpha=0.4)+
theme_classic(base_size = 20)+xlab("")+ylab("Precision\n")+
stat_summary(fun.y = mean, color = "red",geom = "point", size = 2)+
stat_compare_means(method="t.test", label.y=1.0, color="blue", size=6, paired = TRUE) +theme(legend.position = "none")
f<-ggplot(data=benchmark_vs_next_best_model, aes(x=Model, y=Recall, fill=Predictors))+geom_boxplot(alpha=0.1)+
geom_point(aes(color=Recall), position = 'jitter', alpha=0.4)+
theme_classic(base_size = 20)+xlab("")+ylab("Sensitivity\n")+
stat_summary(fun.y = mean, color = "red",geom = "point", size = 2)+
stat_compare_means(method="t.test", label.y=1.0, color="blue", size=6, paired=TRUE) +theme(legend.position = "none")
g<-ggplot(data=benchmark_vs_next_best_model, aes(x=Model, y=Specificity, fill=Predictors))+geom_boxplot(alpha=0.1)+
geom_point(aes(color=Specificity), position = 'jitter', alpha=0.4)+
theme_classic(base_size = 20)+xlab("")+ylab("Specificity\n")+
stat_summary(fun.y = mean, color = "red",geom = "point", size = 2)+
stat_compare_means(method="t.test", label.y=1.0, color="blue", size=6, paired=TRUE) +theme(legend.position = "none")
h<-ggplot(data=benchmark_vs_next_best_model, aes(x=Model, y=Accuracy, fill=Predictors))+geom_boxplot(alpha=0.1)+
geom_point(aes(color=Accuracy), position = 'jitter', alpha=0.4)+
theme_classic(base_size = 20)+xlab("")+ylab("Accuracy\n")+
stat_summary(fun.y = mean, color = "red",geom = "point", size = 2)+
stat_compare_means(method="t.test", label.y=1.0, color="blue", size=6, paired=TRUE) +theme(legend.position = "none")
ggarrange(e,f,g,h, ncol = 2, nrow = 2, common.legend=TRUE, legend = "bottom")
ggarrange(a,b,c,d, ncol = 2, nrow = 2, common.legend=TRUE, legend = "bottom")
ggplot(data=benchmark_vs_best_model, aes(x=Model, y=Accuracy, fill=Predictors))+geom_boxplot(alpha=0.1)+
geom_point(aes(color=Accuracy), position = 'jitter', alpha=0.4)+
theme_classic(base_size = 20)+xlab("")+ylab("Accuracy\n")+
stat_summary(fun.y = mean, color = "red",geom = "point", size = 2)+
stat_summary(fun.y=mean, colour="red", geom="text", show_guide = FALSE, vjust=-0.7, aes( label=round(..y.., digits=1)))+
stat_compare_means(method="t.test", label.y=1.0, color="blue", size=6, paired=TRUE) +theme(legend.position = "none")
ggplot(data=benchmark_vs_best_model, aes(x=Model, y=Accuracy, fill=Predictors))+geom_boxplot(alpha=0.1)+
geom_point(aes(color=Accuracy), position = 'jitter', alpha=0.4)+
theme_classic(base_size = 20)+xlab("")+ylab("Accuracy\n")+
stat_summary(fun.y = mean, color = "red",geom = "point", size = 2)+
stat_summary(fun.y=mean, colour="red", geom="text", show_guide = FALSE, vjust=-0.6, aes( label=round(..y.., digits=1)))+
stat_compare_means(method="t.test", label.y=1.0, color="blue", size=6, paired=TRUE) +theme(legend.position = "none")
ggplot(data=benchmark_vs_best_model, aes(x=Model, y=Accuracy, fill=Predictors))+geom_boxplot(alpha=0.1)+
geom_point(aes(color=Accuracy), position = 'jitter', alpha=0.4)+
theme_classic(base_size = 20)+xlab("")+ylab("Accuracy\n")+
stat_summary(fun.y = mean, color = "red",geom = "point", size = 2)+
stat_summary(fun.y=mean, colour="red", geom="text", vjust=-0.6, aes( label=round(..y.., digits=1)))+
stat_compare_means(method="t.test", label.y=1.0, color="blue", size=6, paired=TRUE) +theme(legend.position = "none")
a<-ggplot(data=benchmark_vs_best_model, aes(x=Model, y=Precision, fill=Predictors))+geom_boxplot(alpha=0.1)+
geom_point(aes(color=Precision), position = 'jitter', alpha=0.4)+
theme_classic(base_size = 20)+xlab("")+ylab("Precision\n")+
stat_summary(fun.y = mean, color = "red",geom = "point", size = 2)+
stat_summary(fun.y=mean, colour="red", geom="text", vjust=-0.6, aes( label=round(..y.., digits=2)))+
stat_compare_means(method="t.test", label.y=1.0, color="blue", size=6, paired = TRUE) +theme(legend.position = "none")
b<-ggplot(data=benchmark_vs_best_model, aes(x=Model, y=Recall, fill=Predictors))+geom_boxplot(alpha=0.1)+
geom_point(aes(color=Recall), position = 'jitter', alpha=0.4)+
theme_classic(base_size = 20)+xlab("")+ylab("Sensitivity\n")+
stat_summary(fun.y = mean, color = "red",geom = "point", size = 2)+
stat_summary(fun.y=mean, colour="red", geom="text", vjust=-0.6, aes( label=round(..y.., digits=2)))+
stat_compare_means(method="t.test", label.y=1.0, color="blue", size=6, paired=TRUE) +theme(legend.position = "none")
c<-ggplot(data=benchmark_vs_best_model, aes(x=Model, y=Specificity, fill=Predictors))+geom_boxplot(alpha=0.1)+
geom_point(aes(color=Specificity), position = 'jitter', alpha=0.4)+
theme_classic(base_size = 20)+xlab("")+ylab("Specificity\n")+
stat_summary(fun.y = mean, color = "red",geom = "point", size = 2)+
stat_summary(fun.y=mean, colour="red", geom="text", vjust=-0.6, aes( label=round(..y.., digits=2)))+
stat_compare_means(method="t.test", label.y=1.0, color="blue", size=6, paired=TRUE) +theme(legend.position = "none")
d<-ggplot(data=benchmark_vs_best_model, aes(x=Model, y=Accuracy, fill=Predictors))+geom_boxplot(alpha=0.1)+
geom_point(aes(color=Accuracy), position = 'jitter', alpha=0.4)+
theme_classic(base_size = 20)+xlab("")+ylab("Accuracy\n")+
stat_summary(fun.y = mean, color = "red",geom = "point", size = 2)+
stat_summary(fun.y=mean, colour="red", geom="text", vjust=-0.6, aes( label=round(..y.., digits=2)))+
stat_compare_means(method="t.test", label.y=1.0, color="blue", size=6, paired=TRUE) +theme(legend.position = "none")
ggarrange(a,b,c,d, ncol = 2, nrow = 2, common.legend=TRUE, legend = "bottom")
##Compare benchmark model vs nextbest model
benchmark_vs_next_best_model<-three_models[-c(11:20), ]
e<-ggplot(data=benchmark_vs_next_best_model, aes(x=Model, y=Precision, fill=Predictors))+geom_boxplot(alpha=0.1)+
geom_point(aes(color=Precision), position = 'jitter', alpha=0.4)+
theme_classic(base_size = 20)+xlab("")+ylab("Precision\n")+
stat_summary(fun.y = mean, color = "red",geom = "point", size = 2)+
stat_summary(fun.y=mean, colour="red", geom="text", vjust=-0.6, aes( label=round(..y.., digits=2)))+
stat_compare_means(method="t.test", label.y=1.0, color="blue", size=6, paired = TRUE) +theme(legend.position = "none")
f<-ggplot(data=benchmark_vs_next_best_model, aes(x=Model, y=Recall, fill=Predictors))+geom_boxplot(alpha=0.1)+
geom_point(aes(color=Recall), position = 'jitter', alpha=0.4)+
theme_classic(base_size = 20)+xlab("")+ylab("Sensitivity\n")+
stat_summary(fun.y = mean, color = "red",geom = "point", size = 2)+
stat_summary(fun.y=mean, colour="red", geom="text", vjust=-0.6, aes( label=round(..y.., digits=2)))+
stat_compare_means(method="t.test", label.y=1.0, color="blue", size=6, paired=TRUE) +theme(legend.position = "none")
g<-ggplot(data=benchmark_vs_next_best_model, aes(x=Model, y=Specificity, fill=Predictors))+geom_boxplot(alpha=0.1)+
geom_point(aes(color=Specificity), position = 'jitter', alpha=0.4)+
theme_classic(base_size = 20)+xlab("")+ylab("Specificity\n")+
stat_summary(fun.y = mean, color = "red",geom = "point", size = 2)+
stat_summary(fun.y=mean, colour="red", geom="text", vjust=-0.6, aes( label=round(..y.., digits=2)))+
stat_compare_means(method="t.test", label.y=1.0, color="blue", size=6, paired=TRUE) +theme(legend.position = "none")
h<-ggplot(data=benchmark_vs_next_best_model, aes(x=Model, y=Accuracy, fill=Predictors))+geom_boxplot(alpha=0.1)+
geom_point(aes(color=Accuracy), position = 'jitter', alpha=0.4)+
theme_classic(base_size = 20)+xlab("")+ylab("Accuracy\n")+
stat_summary(fun.y = mean, color = "red",geom = "point", size = 2)+
stat_summary(fun.y=mean, colour="red", geom="text", vjust=-0.6, aes( label=round(..y.., digits=2)))+
stat_compare_means(method="t.test", label.y=1.0, color="blue", size=6, paired=TRUE) +theme(legend.position = "none")
ggarrange(e,f,g,h, ncol = 2, nrow = 2, common.legend=TRUE, legend = "bottom")
ggarrange(e,f,g,h, ncol = 2, nrow = 2, common.legend=TRUE, legend = "bottom")
a<-ggplot(data=benchmark_vs_best_model, aes(x=Model, y=Precision, fill=Predictors))+geom_boxplot(alpha=0.1)+
geom_point(aes(color=Precision), position = 'jitter', alpha=0.4)+
theme_classic(base_size = 20)+xlab("")+ylab("Precision\n")+
stat_summary(fun.y = mean, color = "red",geom = "point", size = 2)+
stat_summary(fun.y=mean, colour="red", geom="text", vjust=-0.6, aes( label=round(..y.., digits=2)))+
stat_compare_means(method="t.test", label.y=1.0, color="blue", size=6, paired = TRUE) +theme(legend.position = "none")
b<-ggplot(data=benchmark_vs_best_model, aes(x=Model, y=Recall, fill=Predictors))+geom_boxplot(alpha=0.1)+
geom_point(aes(color=Recall), position = 'jitter', alpha=0.4)+
theme_classic(base_size = 20)+xlab("")+ylab("Sensitivity\n")+
stat_summary(fun.y = mean, color = "red",geom = "point", size = 2)+
stat_summary(fun.y=mean, colour="red", geom="text", vjust=-0.6, aes( label=round(..y.., digits=2)))+
stat_compare_means(method="t.test", label.y=1.0, color="blue", size=6, paired=TRUE) +theme(legend.position = "none")
c<-ggplot(data=benchmark_vs_best_model, aes(x=Model, y=Specificity, fill=Predictors))+geom_boxplot(alpha=0.1)+
geom_point(aes(color=Specificity), position = 'jitter', alpha=0.4)+
theme_classic(base_size = 20)+xlab("")+ylab("Specificity\n")+
stat_summary(fun.y = mean, color = "red",geom = "point", size = 2)+
stat_summary(fun.y=mean, colour="red", geom="text", vjust=-0.6, aes( label=round(..y.., digits=2)))+
stat_compare_means(method="t.test", label.y=1.0, color="blue", size=6, paired=TRUE) +theme(legend.position = "none")
d<-ggplot(data=benchmark_vs_best_model, aes(x=Model, y=Accuracy, fill=Predictors))+geom_boxplot(alpha=0.1)+
geom_point(aes(color=Accuracy), position = 'jitter', alpha=0.4)+
theme_classic(base_size = 20)+xlab("")+ylab("Accuracy\n")+
stat_summary(fun.y = mean, color = "red",geom = "point", size = 2)+
stat_summary(fun.y=mean, colour="red", geom="text", vjust=-0.6, aes( label=round(..y.., digits=2)))+
stat_compare_means(method="t.test", label.y=1.0, color="blue", size=6, paired=TRUE) +theme(legend.position = "none")
ggarrange(a,b,c,d, ncol = 2, nrow = 2, common.legend=TRUE, legend = "bottom")
##Compare benchmark model vs nextbest model
benchmark_vs_next_best_model<-three_models[-c(11:20), ]
e<-ggplot(data=benchmark_vs_next_best_model, aes(x=Model, y=Precision, fill=Predictors))+geom_boxplot(alpha=0.1)+
geom_point(aes(color=Precision), position = 'jitter', alpha=0.4)+
theme_classic(base_size = 20)+xlab("")+ylab("Precision\n")+
stat_summary(fun.y = mean, color = "red",geom = "point", size = 2)+
stat_summary(fun.y=mean, colour="red", geom="text", vjust=-0.6, aes( label=round(..y.., digits=2)))+
stat_compare_means(method="t.test", label.y=1.0, color="blue", size=6, paired = TRUE) +theme(legend.position = "none")
f<-ggplot(data=benchmark_vs_next_best_model, aes(x=Model, y=Recall, fill=Predictors))+geom_boxplot(alpha=0.1)+
geom_point(aes(color=Recall), position = 'jitter', alpha=0.4)+
theme_classic(base_size = 20)+xlab("")+ylab("Sensitivity\n")+
stat_summary(fun.y = mean, color = "red",geom = "point", size = 2)+
stat_summary(fun.y=mean, colour="red", geom="text", vjust=-0.6, aes( label=round(..y.., digits=2)))+
stat_compare_means(method="t.test", label.y=1.0, color="blue", size=6, paired=TRUE) +theme(legend.position = "none")
g<-ggplot(data=benchmark_vs_next_best_model, aes(x=Model, y=Specificity, fill=Predictors))+geom_boxplot(alpha=0.1)+
geom_point(aes(color=Specificity), position = 'jitter', alpha=0.4)+
theme_classic(base_size = 20)+xlab("")+ylab("Specificity\n")+
stat_summary(fun.y = mean, color = "red",geom = "point", size = 2)+
stat_summary(fun.y=mean, colour="red", geom="text", vjust=-0.6, aes( label=round(..y.., digits=2)))+
stat_compare_means(method="t.test", label.y=1.0, color="blue", size=6, paired=TRUE) +theme(legend.position = "none")
h<-ggplot(data=benchmark_vs_next_best_model, aes(x=Model, y=Accuracy, fill=Predictors))+geom_boxplot(alpha=0.1)+
geom_point(aes(color=Accuracy), position = 'jitter', alpha=0.4)+
theme_classic(base_size = 20)+xlab("")+ylab("Accuracy\n")+
stat_summary(fun.y = mean, color = "red",geom = "point", size = 2)+
stat_summary(fun.y=mean, colour="red", geom="text", vjust=-0.6, aes( label=round(..y.., digits=2)))+
stat_compare_means(method="t.test", label.y=1.0, color="blue", size=6, paired=TRUE) +theme(legend.position = "none")
ggarrange(e,f,g,h, ncol = 2, nrow = 2, common.legend=TRUE, legend = "bottom")
ggarrange(a,b,c,d, ncol = 2, nrow = 2, common.legend=TRUE, legend = "bottom")
ggarrange(e,f,g,h, ncol = 2, nrow = 2, common.legend=TRUE, legend = "bottom")
